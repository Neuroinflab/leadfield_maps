import os
import numpy as np
# import subprocess
# import signal

num_proc = 10

def big_loop(pos_list, proc_idx, num_proc):
    save_as = 'traub_anis_' + str(proc_idx) + '.h5'
    # for parallel computing


def gen_bash_script(pos_list, num_proc):
    proc_vals = np.linspace(0, len(pos_list), num_proc + 1).astype(int)
    filename = 'parallel_fem.sh'
    if os.path.isfile(filename):
        os.remove(filename)
    f = open(filename, 'w')
    f.write('#generated by generate_parallel.py\n')
    for proc_idx in range(num_proc):
        pt_idxs = range(proc_vals[proc_idx - 1], proc_vals[proc_idx])
        fresh_lst = [pos_list[ii] for ii in pt_idxs]
        #fem_pts('anisotropic', fresh_lst, save_as)
        if ii != num_proc - 1:
            f.write('python forward_traub.py '+ str(num_proc) + ' '+ str(proc_idx + 1) + ' &\n')
        else:
            f.write('python forward_traub.py ' + str(num_proc) + ' ' + str(proc_idx + 1) + '\n')
    f.close()

#proc_list = []
#for ii in range(num_proc):
    #cmd = 'python fem_gauss_parallel.py '+str(num_proc)+' '+str(ii+1)
    #pro = subprocess.Popen(cmd, stdout=subprocess.PIPE,
    #                       shell=True, preexec_fn=os.setsid)
    #proc_list.append(pro)

# while True:
#     choice = raw_input("Press e to terminate> ")
#     if choice == 'e' :
#         os.killpg(pro.pid, signal.SIGTERM)
#         break
